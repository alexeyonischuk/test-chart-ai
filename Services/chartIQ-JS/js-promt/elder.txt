### **Elder Studies Overview**

The **Elder Studies** set includes several indicators developed by Dr. Alexander Elder, designed to help traders evaluate price trends and momentum. These studies are widely used in technical analysis to identify bullish and bearish signals, assess the force behind price movements, and help traders make informed decisions.

### **Included Studies**
1. **Elder Impulse System**:
   - **Purpose**: Identifies bullish, bearish, or neutral price movements based on the combination of moving averages and momentum indicators.
   - **Inputs**: None by default, but users can customize colors for bullish, bearish, and neutral signals.
   - **Outputs**:
     - **Bullish**: Indicates an upward trend when both price momentum and moving averages are increasing.
     - **Bearish**: Indicates a downward trend when both price momentum and moving averages are decreasing.
     - **Neutral**: Indicates mixed signals, where one indicator shows strength while the other does not.

2. **Elder Ray Index**:
   - **Purpose**: Measures buying and selling pressure using the difference between the high/low prices and a moving average.
   - **Inputs**:
     - **Period**: (Number) Defines the number of periods used to calculate the exponential moving average (EMA). Typically set to 13.
   - **Outputs**:
     - **Elder Bull Power**: The difference between the high price and the EMA, showing buying pressure.
     - **Elder Bear Power**: The difference between the low price and the EMA, showing selling pressure.

3. **Elder Force Index**:
   - **Purpose**: Combines price and volume to measure the force behind a price movement, helping to identify turning points in the market.
   - **Inputs**:
     - **Period**: (Number) Defines the number of periods used for the exponential moving average of the force index.
   - **Outputs**: Displays the Elder Force Index values, indicating whether the market is showing strong buying or selling force.

### **Calculation Process**
- **Elder Impulse System**: Combines a 13-period exponential moving average (EMA) with a momentum oscillator, such as the MACD. It assigns a color to each bar on the chart to represent the direction of both momentum and the moving average.
- **Elder Ray Index**: Calculates the EMA of the price and compares it with the high and low prices to determine buying and selling pressure.
- **Elder Force Index**: Uses the difference between the current and previous close prices, multiplied by volume, to assess market force. A moving average smooths the index to make trends more apparent.

### **Warnings and Notes**:
- **Incompatible with Aggregated Charts**: The **Elder Impulse System** does not work with certain aggregated chart types, such as Renko or Kagi charts. It is designed to function with standard OHLC (open-high-low-close) data.
- **Customization**: Users can customize the colors and periods used for the calculations in all Elder studies to match their trading preferences.

### **Code Example**:


import { CIQ as _CIQ } from "../../../js/chartiq.js";
import "../../../js/standard/studies.js";


let __js_advanced_studies_elder_ = (_exports) => {

/* global _CIQ, _timezoneJS, _SplinePlotter */


var CIQ = typeof _CIQ !== "undefined" ? _CIQ : _exports.CIQ;

if (!CIQ.Studies) {
	console.error("elder feature requires first activating studies feature.");
} else {
	CIQ.Studies.calculateElderImpulse = function (stx, sd) {
		var aggregationType = stx.layout.aggregationType;
		var customChart = stx.chart.customChart;
		if (customChart) {
			if (sd.disabled || (aggregationType && aggregationType != "ohlc")) {
				if (!sd.disabled)
					sd.error =
						"Elder Impulse study is not compatible with aggregated chart types.";
				if (customChart.colorFunction)
					customChart.priorColorFunction = customChart.colorFunction;
				if (customChart.chartType)
					customChart.priorChartType = customChart.chartType;
				customChart.colorFunction = null;
				customChart.chartType = null;
				stx.setMainSeriesRenderer();
				return;
			}
			if (customChart.priorColorFunction) {
				customChart.colorFunction = customChart.priorColorFunction;
				customChart.priorColorFunction = null;
				customChart.chartType = customChart.priorChartType;
				customChart.priorChartType = null;
				stx.setMainSeriesRenderer();
			}
		}

		var quotes = sd.chart.scrubbed;
		var bull = sd.outputs.Bullish;
		var bear = sd.outputs.Bearish;
		var neutral = sd.outputs.Neutral;

		CIQ.Studies.MA("exponential", 13, "Close", 0, "_MA", stx, sd);
		sd.macd = new CIQ.Studies.StudyDescriptor("_" + sd.name, "macd", sd.panel);
		sd.macd.chart = sd.chart;
		sd.macd.days = sd.days;
		sd.macd.startFrom = sd.startFrom;
		sd.macd.inputs = {
			"Fast MA Period": 12,
			"Slow MA Period": 26,
			"Signal Period": 9
		};
		sd.macd.outputs = { _MACD: null, _Signal: null };
		CIQ.Studies.calculateMACD(stx, sd.macd);

		var color;
		for (var i = sd.startFrom; i < quotes.length; i++) {
			if (i === 0) color = neutral;
			else if (
				quotes[i]["_MA " + sd.name] > quotes[i - 1]["_MA " + sd.name] &&
				quotes[i]["_" + sd.name + "_hist"] >
					quotes[i - 1]["_" + sd.name + "_hist"]
			)
				color = bull;
			else if (
				quotes[i]["_MA " + sd.name] < quotes[i - 1]["_MA " + sd.name] &&
				quotes[i]["_" + sd.name + "_hist"] <
					quotes[i - 1]["_" + sd.name + "_hist"]
			)
				color = bear;
			else color = neutral;
			quotes[i]["Result " + sd.name] = color;
			//if(i) quotes[i-1][sd.name+"_hist"]=null;
		}
	};

	CIQ.Studies.calculateElderRay = function (stx, sd) {
		var quotes = sd.chart.scrubbed;
		if (quotes.length < sd.days) {
			sd.error = true;
			return;
		}
		CIQ.Studies.MA("exponential", sd.days, "Close", 0, "_EMA", stx, sd);

		for (var i = Math.max(sd.startFrom, sd.days - 1); i < quotes.length; i++) {
			quotes[i][sd.name + "_hist1"] =
				quotes[i].High - quotes[i]["_EMA " + sd.name];
			quotes[i][sd.name + "_hist2"] =
				quotes[i].Low - quotes[i]["_EMA " + sd.name];
		}
		sd.outputMap = {};
		sd.outputMap[sd.name + "_hist1"] = "";
		sd.outputMap[sd.name + "_hist2"] = "";
	};

	CIQ.Studies.calculateElderForce = function (stx, sd) {
		var quotes = sd.chart.scrubbed;
		if (quotes.length < sd.days) {
			sd.error = true;
			return;
		}
		for (var i = Math.max(1, sd.startFrom); i < quotes.length; i++) {
			quotes[i]["_EF1 " + sd.name] =
				quotes[i].Volume * (quotes[i].Close - quotes[i - 1].Close);
		}
		CIQ.Studies.MA(
			"exponential",
			sd.days,
			"_EF1 " + sd.name,
			0,
			"Result",
			stx,
			sd
		);
	};

	CIQ.Studies.initElderImpulse = function (
		stx,
		type,
		inputs,
		outputs,
		parameters,
		panel
	) {
		const sd = CIQ.Studies.initializeFN(
			stx,
			type,
			inputs,
			outputs,
			parameters,
			panel
		);
		if (!parameters.calculateOnly) {
			if (
				!stx.chart ||
				!stx.chart.panel || // running in StudyCalculator
				(stx.chart.customChart && stx.chart.customChart.owner !== sd.name)
			) {
				stx.dispatch("notification", "eldercannotadd");
				return;
			}
			stx.chart.customChart = {
				owner: sd.name,
				chartType: "colored_bar",
				colorFunction: function (stx, quote, mode) {
					if (!quote) return;
					var color = quote["Result " + sd.name];
					if (color && typeof color == "object") color = color.color;
					return color;
				}
			};
			stx.setMainSeriesRenderer();
		}

		return sd;
	};

	CIQ.Studies.displayElderForce = function (stx, sd, quotes) {
		CIQ.Studies.displaySeriesAsLine(stx, sd, quotes);
		var color = CIQ.Studies.determineColor(sd.outputs.Result);
		var panel = stx.panels[sd.panel];
		var yAxis = sd.getYAxis(stx);
		var params = {
			skipTransform: panel.name != sd.chart.name,
			panelName: sd.panel,
			band: "Result " + sd.name,
			threshold: 0,
			color: color,
			yAxis: yAxis
		};
		if (!sd.highlight && stx.highlightedDraggable) params.opacity = 0.3;
		params.direction = 1;
		CIQ.preparePeakValleyFill(stx, params);
		params.direction = -1;
		CIQ.preparePeakValleyFill(stx, params);
	};

	CIQ.Studies.displayElderRay = function (stx, sd, quotes) {
		var panel = stx.panels[sd.panel],
			context = sd.getContext(stx);
		var yAxis = sd.getYAxis(stx);
		var y = stx.pixelFromPrice(0, panel, yAxis);

		var myWidth = stx.layout.candleWidth - 2;
		if (myWidth < 2) myWidth = 1;
		function drawBar(i, reduction, output, hist) {
			context.fillStyle = CIQ.Studies.determineColor(sd.outputs[output]);
			context.fillRect(
				Math.floor(
					stx.pixelFromBar(i, panel.chart) - myWidth / 2 + myWidth * reduction
				),
				Math.floor(y),
				Math.floor(myWidth * (1 - 2 * reduction)),
				Math.floor(stx.pixelFromPrice(quote[sd.name + hist], panel, yAxis) - y)
			);
		}

		stx.canvasColor("stx_histogram");
		var fillStyle = context.fillStyle;
		if (!sd.underlay) context.globalAlpha = 1;
		stx.startClip(sd.panel);
		if (!sd.highlight && stx.highlightedDraggable) context.globalAlpha *= 0.3;
		for (var i = 0; i < quotes.length; i++) {
			var quote = quotes[i];
			if (!quote) continue;
			if (quote.candleWidth)
				myWidth = Math.floor(Math.max(1, quote.candleWidth - 2));
			if (quote[sd.name + "_hist1"] > 0)
				drawBar(i, 0, "Elder Bull Power", "_hist1");
			if (quote[sd.name + "_hist2"] < 0)
				drawBar(i, 0, "Elder Bear Power", "_hist2");
			if (quote[sd.name + "_hist1"] < 0)
				drawBar(i, 0.1, "Elder Bull Power", "_hist1");
			if (quote[sd.name + "_hist2"] > 0)
				drawBar(i, 0.1, "Elder Bear Power", "_hist2");
		}
		stx.endClip();
		context.fillStyle = fillStyle;
	};

	CIQ.Studies.studyLibrary = CIQ.extend(CIQ.Studies.studyLibrary, {
		"Elder Force": {
			name: "Elder Force Index",
			calculateFN: CIQ.Studies.calculateElderForce,
			seriesFN: CIQ.Studies.displayElderForce,
			inputs: { Period: 13 }
		},
		"Elder Ray": {
			name: "Elder Ray Index",
			seriesFN: CIQ.Studies.displayElderRay,
			calculateFN: CIQ.Studies.calculateElderRay,
			centerline: 0,
			inputs: { Period: 13 },
			outputs: { "Elder Bull Power": "#00DD00", "Elder Bear Power": "#FF0000" }
		},
		"Elder Impulse": {
			name: "Elder Impulse System",
			calculateFN: CIQ.Studies.calculateElderImpulse,
			initializeFN: CIQ.Studies.initElderImpulse,
			seriesFN: null,
			customRemoval: true,
			underlay: true,
			inputs: {},
			outputs: { Bullish: "#8BC176", Bearish: "#DD3E39", Neutral: "#5F7CB8" },
			removeFN: function (stx, sd) {
				if (
					!stx.chart ||
					(stx.chart.customChart && stx.chart.customChart.owner !== sd.name)
				)
					return;
				stx.chart.customChart = null;
				stx.setMainSeriesRenderer();
			}
		}
	});
}

};
__js_advanced_studies_elder_(typeof window !== "undefined" ? window : global);


This description summarizes the Elder studies, their purpose, inputs, outputs, and calculation logic with a placeholder for the actual code implementation.